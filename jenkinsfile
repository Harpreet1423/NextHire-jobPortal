pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        ECR_REPO = '345376996795.dkr.ecr.us-east-1.amazonaws.com/job-portal'
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        SONARQUBE = credentials('SonarQube Token') // Make sure this exists in Jenkins credentials
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Harpreet1423/NextHire-jobPortal.git'
            }
        }

        stage('SonarQube Analysis') {
            tools {
                sonarQubeScanner 'SonarScannerDefault' // Tool name must match Jenkins global tool config
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh 'sonar-scanner'
                }
            }
        }

        stage('Snyk SCA') {
            steps {
                sh 'snyk test'
            }
        }

        stage('Terraform - Provision Infra') {
            steps {
                dir('terraform') {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Docker Build') {
            steps {
                sh "docker build -t app:${IMAGE_TAG} ."
            }
        }

        stage('Trivy Scan') {
            steps {
                sh "trivy image app:${IMAGE_TAG}"
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region $AWS_DEFAULT_REGION \
                        | docker login --username AWS --password-stdin $ECR_REPO
                        docker tag app:${IMAGE_TAG} $ECR_REPO:latest
                        docker push $ECR_REPO:latest
                    """
                }
            }
        }

        stage('Deploy to Staging ECS') {
            steps {
                sh 'aws ecs update-service --cluster staging-cluster --service staging-service --force-new-deployment'
            }
        }

        stage('OWASP ZAP DAST') {
            steps {
                sh 'zap-cli start && zap-cli open-url http://staging-url && zap-cli quick-scan http://staging-url'
            }
        }

        stage('Deploy to Production ECS') {
            steps {
                sh 'aws ecs update-service --cluster prod-cluster --service prod-service --force-new-deployment'
            }
        }

        stage('Fetch Secrets') {
            steps {
                sh 'aws secretsmanager get-secret-value --secret-id my-secret-id'
            }
        }
    }
}
