pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        ECR_REPO = '345376996795.dkr.ecr.us-east-1.amazonaws.com/job-portal'
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        ECR_IMAGE = "${ECR_REPO}:${IMAGE_TAG}"
        SONAR_HOST_URL = 'http://localhost:9000'
        SONAR_PROJECT_KEY = 'NextHire-jobPortal'
        TRIVY_MODE = 'blocking'
        // Do not put secrets here; we use withCredentials where needed
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Harpreet1423/NextHire-jobPortal.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    withCredentials([string(credentialsId: 'sonar-auth-token', variable: 'SONAR_TOKEN')]) {
                        script {
                            def scannerHome = tool name: 'SonarScannerDefault', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                            // Windows bat: use %SONAR_TOKEN%
                            bat """
                                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                                -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} ^
                                -Dsonar.sources=. ^
                                -Dsonar.host.url=${env.SONAR_HOST_URL} ^
                                -Dsonar.token=%SONAR_TOKEN%
                            """
                        }
                    }
                }
            }
        }

        stage('Snyk Security Scan') {
            steps {
                withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
                    bat 'npm install -g snyk'
                    // pass token via env var configured by withCredentials
                    bat 'set SNYK_TOKEN=%SNYK_TOKEN% && snyk test --all-projects --ci'
                    bat 'set SNYK_TOKEN=%SNYK_TOKEN% && snyk monitor --all-projects'
                }
            }
        }

        stage('Terraform - Provision Infra') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                     credentialsId: 'aws-creds']
                ]) {
                    dir('terraform') {
                        bat 'terraform init -upgrade'
                        bat 'terraform plan -out=tfplan'
                        bat 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                  // Use returnStatus to catch failures and fail with a descriptive message
                  def rc = bat(script: "docker build -t app:${IMAGE_TAG} -f Dockerfile .", returnStatus: true)
                  if (rc != 0) {
                    error "Docker build failed with exit code ${rc}"
                  }
                  rc = bat(script: "docker tag app:${IMAGE_TAG} ${ECR_IMAGE}", returnStatus: true)
                  if (rc != 0) {
                    error "Docker tag failed with exit code ${rc}"
                  }
                }
            }
        }

        stage('Trivy Scan (image)') {
          steps {
            echo "===== Trivy scan will use image: ${ECR_IMAGE} ====="
            script {
              // Use a stable filename for the JSON report
              env.TRIVY_REPORT = "trivy-report-${BUILD_NUMBER}.json"
            }

            // PowerShell + docker invocation inside a Windows bat block:
            // NOTE: all PowerShell $variables are escaped (e.g. \$r) to avoid Groovy GString interpolation.
            bat """
              where trivy 1>nul 2>&1
              if %ERRORLEVEL% EQU 0 (
                echo Found trivy on agent, running local CLI and producing JSON report...
                trivy image --format json --output %TRIVY_REPORT% ${ECR_IMAGE}
              ) else (
                echo trivy not found locally, running trivy via docker container...
                REM Ensure Docker socket mount path is correct for your Windows Docker setup.
                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --format json --output /tmp/%TRIVY_REPORT% ${ECR_IMAGE}
                REM copy result from container location to host by running a short-lived container that writes the file to workspace
                docker run --rm -v %CD%:/workdir aquasec/trivy:latest sh -c "cat /tmp/%TRIVY_REPORT%" > %TRIVY_REPORT% || (
                  REM fallback: try running trivy directly writing to stdout and capture
                  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --format json ${ECR_IMAGE} > %TRIVY_REPORT%
                )
              )

              REM Now parse JSON with PowerShell to count HIGH/CRITICAL vulnerabilities:
              powershell -NoProfile -Command ^
                "\$r = Get-Content -Raw '%TRIVY_REPORT%' | ConvertFrom-Json; ^
                 \$count = 0; ^
                 if (\$r -and \$r.Results) { ^
                   foreach (\$res in \$r.Results) { ^
                     if (\$res.Vulnerabilities) { ^
                       foreach (\$v in \$res.Vulnerabilities) { ^
                         if (\$v.Severity -in @('HIGH','CRITICAL')) { \$count++ } ^
                       } ^
                     } ^
                   } ^
                 } ^
                 Write-Host 'Trivy HIGH/CRITICAL findings:' \$count; ^
                 if ('${TRIVY_MODE}' -eq 'blocking' -and \$count -gt 0) { exit 1 } else { exit 0 }"
            """
          }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                     credentialsId: 'aws-creds']
                ]) {
                    script {
                        // Use returnStatus to catch login/push errors and fail with clear message
                        def cmd = """
                            aws ecr get-login-password --region ${env.AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPO}
                            docker tag app:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}
                            docker push ${ECR_REPO}:${IMAGE_TAG}
                            rem also push latest (optional)
                            docker tag app:${IMAGE_TAG} ${ECR_REPO}:latest
                            docker push ${ECR_REPO}:latest
                        """
                        def rc = bat(script: cmd, returnStatus: true)
                        if (rc != 0) {
                            error "Push to ECR failed with exit code ${rc}"
                        } else {
                            echo "Push to ECR succeeded"
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging ECS') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                     credentialsId: 'aws-creds']
                ]) {
                    script {
                        def rc = bat(script: "aws ecs update-service --cluster job-portal-cluster --service staging-service --force-new-deployment --region ${env.AWS_DEFAULT_REGION}", returnStatus: true)
                        if (rc != 0) {
                          error "ECS update-service failed with exit code ${rc}"
                        } else {
                          echo "ECS update-service triggered successfully"
                        }
                    }
                }
            }
        }
    }

    post {
        success { echo "PIPELINE SUCCESS" }
        failure { echo "PIPELINE FAILED" }
        always { echo "Finished: ${currentBuild.fullDisplayName}" }
    }
}



// pipeline {
//     agent any

//     environment {
//         AWS_DEFAULT_REGION = 'us-east-1'
//         ECR_REPO = '345376996795.dkr.ecr.us-east-1.amazonaws.com/job-portal'
//         IMAGE_TAG = "build-${BUILD_NUMBER}"
//         SONAR_HOST_URL = 'http://localhost:9000'
//         SONAR_PROJECT_KEY = 'NextHire-jobPortal'
//         // Don't bind SONAR_TOKEN or SNYK_TOKEN here as environment - we will use withCredentials explicitly
//         // SNYK_TOKEN = credentials('SNYK_TOKEN')
//     }

//     stages {

//         stage('Checkout Code') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/Harpreet1423/NextHire-jobPortal.git'
//             }
//         }

//         stage('SonarQube Analysis') {
//             steps {
//                 withSonarQubeEnv('sonarqube') {
//                     // bind token safely for bat
//                     withCredentials([string(credentialsId: 'sonar-auth-token', variable: 'SONAR_TOKEN')]) {
//                         script {
//                             def scannerHome = tool name: 'SonarScannerDefault', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
//                             // Use sonar.token property (not sonar.login) and use %SONAR_TOKEN% inside Windows bat
//                             bat """
//                                 "${scannerHome}\\bin\\sonar-scanner.bat" ^
//                                 -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} ^
//                                 -Dsonar.sources=. ^
//                                 -Dsonar.host.url=${env.SONAR_HOST_URL} ^
//                                 -Dsonar.token=%SONAR_TOKEN%
//                             """
//                         }
//                     }
//                 }
//             }
//         }

//         stage('Snyk Security Scan') {
//             steps {
//                 withCredentials([string(credentialsId: 'SNYK_TOKEN', variable: 'SNYK_TOKEN')]) {
//                     bat 'npm install -g snyk'
//                     // pass token via env var configured by withCredentials
//                     bat 'set SNYK_TOKEN=%SNYK_TOKEN% && snyk test --all-projects --ci'
//                     bat 'set SNYK_TOKEN=%SNYK_TOKEN% && snyk monitor --all-projects'
//                 }
//             }
//         }

//         stage('Terraform - Provision Infra') {
//             steps {
//                 withCredentials([
//                     [$class: 'AmazonWebServicesCredentialsBinding',
//                      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
//                      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
//                      credentialsId: 'aws-creds']
//                 ]) {
//                     dir('terraform') {
//                         bat 'terraform init -upgrade'
//                         // Do not import here. Do terraform plan & apply.
//                         bat 'terraform plan -out=tfplan'
//                         bat 'terraform apply -auto-approve tfplan'
//                     }
//                 }
//             }
//         }

//         stage('Docker Build') {
//             steps {
//                 // build image and tag with local tag
//                 bat "docker build -t app:${IMAGE_TAG} -f Dockerfile ."
//             }
//         }

//         stage('Trivy Scan (image)') {
//       steps {
//         // Run trivy as docker container; fail build on HIGH/CRITICAL
//         bat '''
//           docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 1 --severity CRITICAL,HIGH ${ECR_IMAGE} || \
//           docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --severity CRITICAL,HIGH ${ECR_IMAGE}
//         '''
//         // Note: The first command exits 1 on findings; second ensures pipeline doesn't crash silently — adjust behavior as you want.
//       }
//     }

//         stage('Push to ECR') {
//             steps {
//                 withCredentials([
//                     [$class: 'AmazonWebServicesCredentialsBinding',
//                      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
//                      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
//                      credentialsId: 'aws-creds']
//                 ]) {
//                     script {
//                         // login, tag with build-specific tag and with latest, then push both
//                         bat """
//                             aws ecr get-login-password --region ${env.AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPO}
//                             docker tag app:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}
//                             docker push ${ECR_REPO}:${IMAGE_TAG}
//                             rem also push latest (optional)
//                             docker tag app:${IMAGE_TAG} ${ECR_REPO}:latest
//                             docker push ${ECR_REPO}:latest
//                         """
//                     }
//                 }
//             }
//         }

//         stage('Deploy to Staging ECS') {
//             steps {
//                 withCredentials([
//                     [$class: 'AmazonWebServicesCredentialsBinding',
//                      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
//                      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
//                      credentialsId: 'aws-creds']
//                 ]) {
//                     // This forces a new deployment; if taskdefinition uses :latest, ECS will pull latest image.
//                     // Better: register new task definition referencing ${ECR_REPO}:${IMAGE_TAG} and update service to use the new revision.
//                     bat """
//                         aws ecs update-service --cluster job-portal-cluster --service staging-service --force-new-deployment --region ${env.AWS_DEFAULT_REGION}
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success { echo "PIPELINE SUCCESS" }
//         failure { echo "PIPELINE FAILED" }
//         always { echo "Finished: ${currentBuild.fullDisplayName}" }
//     }
// }



