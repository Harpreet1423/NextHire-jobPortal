pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        ECR_REPO = '345376996795.dkr.ecr.us-east-1.amazonaws.com/job-portal'
        IMAGE_TAG = "build-${BUILD_NUMBER}"
        SONAR_HOST_URL = 'http://localhost:9000'
        SONAR_PROJECT_KEY = 'NextHire-jobPortal'
        SONAR_TOKEN = credentials('sonar-auth-token') // Jenkins credential ID for SonarQube
        SNYK_TOKEN = credentials('SNYK_TOKEN')    // âœ… Jenkins credential ID for Snyk
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Harpreet1423/NextHire-jobPortal.git'
            }
        }
stage('SonarQube Analysis') {
    steps {
        withSonarQubeEnv('sonarqube') {
            script {
                def scannerHome = tool name: 'SonarScannerDefault', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                bat """
                    "${scannerHome}\\bin\\sonar-scanner.bat" ^
                    -Dsonar.projectKey=%SONAR_PROJECT_KEY% ^
                    -Dsonar.sources=. ^
                    -Dsonar.host.url=%SONAR_HOST_URL% ^
                    -Dsonar.login=%SONAR_TOKEN%
                """
            }
        }
    }
}

        
       stage('Snyk Security Scan') {
    steps {
        script {
            // Install Snyk CLI
            bat 'npm install -g snyk'

            // No interactive auth. Snyk picks token from SNYK_TOKEN env var.
            // Run tests in non-interactive CI mode:
            bat 'snyk test --all-projects --ci'

            // Optional: send a snapshot to Snyk dashboard
            bat 'snyk monitor --all-projects'
        }
    }
}

    
        stage('Terraform - Provision Infra') {
        steps {
            // Bind credentials to env vars for this block
           withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
  accessKeyVariable: 'AWS_ACCESS_KEY_ID',
  secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
  credentialsId: 'aws-creds']]) {
            // dir('terraform') {
            //     // Non-interactive flags and no-color for clean CI logs
            //     bat 'terraform init'
            //     bat 'terraform import aws_iam_role.ecs_task_execution_role ecsTaskExecutionRole'
            //     bat 'terraform plan'
            //     bat 'terraform apply -auto-approve'
            // }
            dir('terraform') {
  bat 'terraform init -no-color'
  powershell '''
  $env:AWS_DEFAULT_REGION = "${env.AWS_DEFAULT_REGION}"
  if (aws ecr describe-repositories --repository-names job-portal --region $env:AWS_DEFAULT_REGION 2>$null) {
    terraform import aws_ecr_repository.job_portal job-portal
  }
  '''
  bat 'terraform plan -out=tfplan -input=false -no-color'
  bat 'terraform apply -input=false -auto-approve tfplan'
}
            }
        }
        }

      

        stage('Docker Build') {
            steps {
                bat "docker build -t app:%IMAGE_TAG% ."
            }
        }

        stage('Trivy Scan') {
            steps {
                bat "trivy image app:%IMAGE_TAG%"
            }
        }

        stage('Push to ECR') {
            steps {
                bat """
                    aws ecr get-login-password --region %AWS_DEFAULT_REGION% | docker login --username AWS --password-stdin %ECR_REPO%
                    docker tag app:%IMAGE_TAG% %ECR_REPO%:latest
                    docker push %ECR_REPO%:latest
                """
            }
        }

        stage('Deploy to Staging ECS') {
            steps {
                bat 'aws ecs update-service --cluster staging-cluster --service staging-service --force-new-deployment'
            }
        }

        stage('OWASP ZAP DAST') {
            steps {
                bat 'zap-cli start && zap-cli open-url http://staging-url && zap-cli quick-scan http://staging-url'
            }
        }

        stage('Deploy to Production ECS') {
            steps {
                bat 'aws ecs update-service --cluster prod-cluster --service prod-service --force-new-deployment'
            }
        }

        stage('Fetch Secrets') {
            steps {
                bat 'aws secretsmanager get-secret-value --secret-id my-secret-id'
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            cleanWs()
        }
        failure {
            echo 'Pipeline failed! Investigate logs and try again.'
        }
    }
}
